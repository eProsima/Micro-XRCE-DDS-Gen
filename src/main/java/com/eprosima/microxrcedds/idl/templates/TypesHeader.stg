// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypesHeader;

import "Common.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx, file=[ctx.filename, ".h"], description=["This header file contains the declaration of the described types in the IDL file."])$

#ifndef _$ctx.filename;format="toUpper"$_H_
#define _$ctx.filename;format="toUpper"$_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include <stdbool.h>
$ctx.directIncludeDependencies : {include | #include "$include$.h"}; separator="\n"$

$definitions; separator="\n"$

#ifdef __cplusplus
}
#endif

#endif // _$ctx.filename;format="toUpper"$_H_

>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<>>
const_decl(ctx, parent, const, const_type) ::= <<
#define $const.name$ $const.value$
>>

typedef_decl(ctx, parent, typedefs, typedefs_type, declarator_type) ::= <<
$declarator_type$
$typedefs :
{ typedef |
$if(!typedef.isType_10)$
typedef $typedef.typedefContentTypeCode.cTypename$ $typedef.name$
$endif$
}; separator="\n"$>>

fwd_decl(ctx, parent, type) ::= <<>>

struct_type(ctx, parent, struct, member_list) ::= <<
$if(parent)$
$else$
/*!
 * @brief This struct represents the structure $struct.cScopedname$ defined by the user in the IDL file.
 * @ingroup $ctx.trimfilename$
 */
$endif$

typedef struct $struct.cScopedname$
{
    $struct.members:{ member | $member_declaration(member)$}; separator=""$
} $struct.cScopedname$;

struct ucdrBuffer;
bool $struct.cScopedname$_serialize_topic(struct ucdrBuffer* writer, const $struct.cScopedname$* topic);
bool $struct.cScopedname$_deserialize_topic(struct ucdrBuffer* reader, $struct.cScopedname$* topic);
uint32_t $struct.cScopedname$_size_of_topic(const $struct.cScopedname$* topic, uint32_t size);
>>

member_type(ctx, member, type_member, declarators) ::= <<

$type_member$
$declarators$

>>

union_type(ctx, parent, union, extensions, switch_type) ::= <<

$switch_type$

>>

element_type(ctx, element, type_element, declarator) ::= <<

$type_element$
$declarator$

>>

bitset_type(ctx, parent, bitset, extensions) ::= <<>>

enum_type(ctx, parent, enum) ::= <<
typedef enum $enum.cScopedname$
{
    $enum.members:{it | $it.name$}; separator=",\n"$
} $enum.cScopedname$;

typedef uint32_t $enum.cScopedname$_cdr;
>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

sequence_type(ctx, sequence, type_sequence) ::= <<

$type_sequence$

>>

map_type(ctx, map, key_type, value_type) ::= <<

$key_type$
$value_type$

>>

string_type(ctx, string) ::= <<>>

wide_string_type(ctx, wstring) ::= <<>>

array_declarator(ctx, array, array_type) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<>>

export_list(exports) ::= <<>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list, operation_type) ::= <<

$operation_type$
$param_list$

>>

param_list(parameters) ::= <<>>

param(parameter, parameter_type) ::= <<

$parameter_type$

>>



// XRCE Utils

member_declaration(member) ::= <<
$if(member.typecode.isType_d)$
$member.typecode.cTypename$ $member.name$[$member.typecode.maxsize$];
$elseif(member.typecode.isType_e)$
uint32_t $member.name$_size;
$member.typecode.contentTypeCode.cTypename$ $member.name$$member.typecode.cTypeDimensions$;
$elseif(member.typecode.isType_10)$
$if(member.typecode.typedefContentTypeCode.isType_d)$
$member.typecode.typedefContentTypeCode.cTypename$ $member.name$[$member.typecode.typedefContentTypeCode.maxsize$];
$elseif(member.typecode.typedefContentTypeCode.isType_e)$
uint32_t $member.name$_size;
$member.typecode.typedefContentTypeCode.cTypename$ $member.name$$member.typecode.typedefContentTypeCode.cTypeDimensions$;
$elseif(member.typecode.typedefContentTypeCode.isType_f)$
$member.typecode.typedefContentTypeCode.cTypename$ $member.name$$member.typecode.typedefContentTypeCode.cTypeDimensions$;
$else$
$member.typecode.contentTypeCode.cTypename$ $member.name$;
$endif$
$elseif(member.typecode.isType_f)$
$member.typecode.cTypename$ $member.name$$member.typecode.cTypeDimensions$;
$elseif(member.typecode.isType_c)$
$member.typecode.cScopedname$_cdr $member.name$;
$else$
$member.typecode.cTypename$ $member.name$;
$endif$
>>