// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypesSource;

import "Common.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx, file=[ctx.filename, ".h"], description=["This header file contains the declaration of the described types in the IDL file."])$

#include "$ctx.filename$.h"

#include <ucdr/microcdr.h>
#include <string.h>

$definitions; separator="\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<>>

const_decl(ctx, parent, const, const_type) ::= <<
$const_type$
>>

typedef_decl(ctx, parent, typedefs, typedefs_type, declarator_type) ::= <<
$declarator_type$
$typedefs_type$
>>

fwd_decl(ctx, parent, type) ::= <<>>

struct_type(ctx, parent, struct, member_list) ::= <<

bool $struct.cScopedname$_serialize_topic(ucdrBuffer* writer, const $struct.cScopedname$* topic)
{
    bool success = true;

    $struct.members :
    { member |
    $if(member.typecode.isType_10)$
    $member_serialization(ctx=ctx, typecode=member.typecode.typedefContentTypeCode, name=member.name, originName=member.name)$
    $else$
    $member_serialization(ctx=ctx, typecode=member.typecode, name=member.name, originName=member.name)$
    $endif$}; separator=""$
    return success && !writer->error;
}

bool $struct.cScopedname$_deserialize_topic(ucdrBuffer* reader, $struct.cScopedname$* topic)
{
    bool success = true;

    $struct.members :
    { member |
    $if(member.typecode.isType_10)$
    $member_deserialization(ctx=ctx, typecode=member.typecode.typedefContentTypeCode, name=member.name, originName=member.name)$
    $else$
    $member_deserialization(ctx=ctx, typecode=member.typecode, name=member.name, originName=member.name)$
    $endif$}; separator=""$
    return success && !reader->error;
}

uint32_t $struct.cScopedname$_size_of_topic(const $struct.cScopedname$* topic, uint32_t size)
{
    uint32_t previousSize = size;
    $struct.members :
    { member |
    $if(member.typecode.isType_10)$
    $member_size(ctx=ctx, typecode=member.typecode.typedefContentTypeCode, name=member.name, originName=member.name)$
    $else$
    $member_size(ctx=ctx, typecode=member.typecode, name=member.name, originName=member.name)$
    $endif$}; separator=""$
    return size - previousSize;
}

>>

member_type(ctx, member, type_member, declarators) ::= <<

$type_member$
$declarators$

>>

union_type(ctx, parent, union, extensions, switch_type) ::= <<

$switch_type$

>>

element_type(ctx, element, type_element, declarator) ::= <<

$type_element$
$declarator$

>>

bitset_type(ctx, parent, bitset, extensions) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

sequence_type(ctx, sequence, type_sequence) ::= <<

$type_sequence$

>>

map_type(ctx, map, key_type, value_type) ::= <<

$key_type$
$value_type$

>>

string_type(ctx, string) ::= <<>>

wide_string_type(ctx, wstring) ::= <<>>

array_declarator(ctx, array, array_type) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<>>

export_list(exports) ::= <<>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list, operation_type) ::= <<

$operation_type$
$param_list$

>>

param_list(parameters) ::= <<>>

param(parameter, parameter_type) ::= <<

$parameter_type$

>>


// ========================================================================================
//                                     SERIALIZATION
// ========================================================================================
member_serialization(ctx, typecode, name, originName) ::= <<
$if(typecode.isType_c)$
success &= ucdr_serialize_uint32_t(writer, (uint32_t)topic->$name$);
$elseif(typecode.primitive)$
success &= ucdr_serialize_$typecode.cTypename$(writer, topic->$name$);
$elseif(typecode.isType_d)$
success &= ucdr_serialize_string(writer, topic->$name$);
$elseif(typecode.isType_e)$
$sequence_serialization(ctx=ctx, typecode=typecode, name=name)$
$elseif(typecode.isType_f)$
$array_serialization(ctx=ctx, typecode=typecode, name=name, originName=originName, dimensions=typecode.dimensions)$
$else$
success &= $typecode.cScopedname$_serialize_topic(writer, &topic->$name$);
$endif$
>>

sequence_serialization(ctx, typecode, name) ::= <<
$if(typecode.contentTypeCode.primitive)$
success &= ucdr_serialize_sequence_$typecode.cTypename$(writer, topic->$name$, topic->$name$_size);
$else$
success &= ucdr_serialize_uint32_t(writer, topic->$name$_size);
for(size_t i = 0; i < topic->$name$_size; ++i)
{
    $member_serialization(ctx=ctx, typecode=typecode.contentTypeCode, name=indexName(name=name, suffix=""), originName=name)$
}
$endif$
>>

array_serialization(ctx, typecode, name, originName, dimensions) ::= <<
$if(rest(dimensions))$
for(int i$length(dimensions)$ = 0; i$length(dimensions)$ < sizeof(topic->$name$) / sizeof(topic->$name$[0]); ++i$length(dimensions)$)
{
    $array_serialization(ctx=ctx, typecode=typecode, name=indexName(name=name, suffix=length(dimensions)), originName=originName, dimensions=rest(dimensions))$
}
$elseif(typecode.contentTypeCode.primitive)$
success &= ucdr_serialize_array_$typecode.cTypename$(writer, topic->$name$, sizeof(topic->$name$) / sizeof($typecode.cTypename$));
$elseif(typecode.contentTypeCode.isType_d)$
for(size_t i = 0; i < sizeof(topic->$name$) / $typecode.contentTypeCode.maxsize$; ++i)
{
    $member_serialization(ctx=ctx, typecode=typecode.contentTypeCode, name=indexName(name=name, suffix=""), originName=originName)$
}
$else$
for(size_t i = 0; i < sizeof(topic->$name$) / sizeof($typecode.cTypename$); ++i)
{
    $member_serialization(ctx=ctx, typecode=typecode.contentTypeCode, name=indexName(name=name, suffix=""), originName=originName)$
}
$endif$
>>

// ========================================================================================
//                                    DESERIALIZATION
// ========================================================================================
member_deserialization(ctx, typecode, name, originName) ::= <<
$if(typecode.isType_c)$
success &= ucdr_deserialize_uint32_t(reader, (uint32_t*)&topic->$name$);
$elseif(typecode.primitive)$
success &= ucdr_deserialize_$typecode.cTypename$(reader, &topic->$name$);
$elseif(typecode.isType_d)$
success &= ucdr_deserialize_string(reader, topic->$name$, $typecode.maxsize$);
$elseif(typecode.isType_e)$
$sequence_deserialization(ctx=ctx, typecode=typecode, name=name)$
$elseif(typecode.isType_f)$
$array_deserialization(ctx=ctx, typecode=typecode, name=name, originName=originName, dimensions=typecode.dimensions)$
$else$
success &= $typecode.cScopedname$_deserialize_topic(reader, &topic->$name$);
$endif$
>>

sequence_deserialization(ctx, typecode, name) ::= <<
$if(typecode.contentTypeCode.primitive)$
success &= ucdr_deserialize_sequence_$typecode.cTypename$(reader, topic->$name$, $typecode.maxsize$, &topic->$name$_size);
$else$
success &= ucdr_deserialize_uint32_t(reader, &topic->$name$_size);
if(topic->$name$_size > $typecode.maxsize$)
{
    reader->error = true;
}
else
{
    for(size_t i = 0; i < topic->$name$_size; ++i)
    {
        $member_deserialization(ctx=ctx, typecode=typecode.contentTypeCode, name=indexName(name=name, suffix=""), originName=name)$
    }
}
$endif$
>>

array_deserialization(ctx, typecode, name, originName, dimensions) ::= <<
$if(rest(dimensions))$
for(int i$length(dimensions)$ = 0; i$length(dimensions)$ < sizeof(topic->$name$) / sizeof(topic->$name$[0]); ++i$length(dimensions)$)
{
    $array_deserialization(ctx=ctx, typecode=typecode, name=indexName(name=name, suffix=length(dimensions)), originName=originName, dimensions=rest(dimensions))$
}
$elseif(typecode.contentTypeCode.primitive)$
success &= ucdr_deserialize_array_$typecode.cTypename$(reader, topic->$name$, sizeof(topic->$name$) / sizeof($typecode.cTypename$));
$elseif(typecode.contentTypeCode.isType_d)$
for(size_t i = 0; i < sizeof(topic->$name$) / $typecode.contentTypeCode.maxsize$; ++i)
{
    $member_deserialization(ctx=ctx, typecode=typecode.contentTypeCode, name=indexName(name=name, suffix=""), originName=originName)$
}
$else$
for(size_t i = 0; i < sizeof(topic->$name$) / sizeof($typecode.cTypename$); ++i)
{
    $member_deserialization(ctx=ctx, typecode=typecode.contentTypeCode, name=indexName(name=name, suffix=""), originName=originName)$
}
$endif$
>>

// ========================================================================================
//                                     SERIALIZED_SIZE
// ========================================================================================
member_size(ctx, typecode, name, originName) ::= <<
$if(typecode.primitive)$
size += ucdr_alignment(size, $typecode.size$) + $typecode.size$;
$elseif(typecode.isType_d)$
size += ucdr_alignment(size, 4) + 4 + (uint32_t)strlen(topic->$name$) + 1;
$elseif(typecode.isType_e)$
$sequence_size(ctx=ctx, typecode=typecode, name=name)$
$elseif(typecode.isType_f)$
$array_size(ctx=ctx, typecode=typecode, name=name, originName=originName, dimensions=typecode.dimensions)$
$else$
size += $typecode.cScopedname$_size_of_topic(&topic->$name$, size);
$endif$
>>

sequence_size(ctx, typecode, name) ::= <<
size += ucdr_alignment(size, 4) + 4;
$if(typecode.contentTypeCode.primitive)$
size += ucdr_alignment(size, $typecode.contentTypeCode.size$) + topic->$name$_size * $typecode.contentTypeCode.size$;
$else$
for(size_t i = 0; i < topic->$name$_size; ++i)
{
    $member_size(ctx=ctx, typecode=typecode.contentTypeCode, name=indexName(name=name, suffix=""), originName=name)$
}
$endif$
>>

array_size(ctx, typecode, name, originName, dimensions) ::= <<
$if(rest(dimensions))$
for(int i$length(dimensions)$ = 0; i$length(dimensions)$ < sizeof(topic->$name$) / sizeof(topic->$name$[0]); ++i$length(dimensions)$)
{
    $array_size(ctx=ctx, typecode=typecode, name=indexName(name=name, suffix=length(dimensions)), originName=originName, dimensions=rest(dimensions))$
}
$elseif(typecode.contentTypeCode.primitive)$
size += ucdr_alignment(size, $typecode.contentTypeCode.size$) + sizeof(topic->$name$);
$elseif(typecode.contentTypeCode.isType_d)$
for(size_t i = 0; i < sizeof(topic->$name$) / $typecode.contentTypeCode.maxsize$; ++i)
{
    $member_size(ctx=ctx, typecode=typecode.contentTypeCode, name=indexName(name=name, suffix=""), originName=originName)$
}
$else$
for(size_t i = 0; i < sizeof(topic->$name$) / sizeof($typecode.cTypename$); ++i)
{
    $member_size(ctx=ctx, typecode=typecode.contentTypeCode, name=indexName(name=name, suffix=""), originName=originName)$
}
$endif$
>>
