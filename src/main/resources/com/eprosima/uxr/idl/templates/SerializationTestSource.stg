// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "SerializationTest.c"], description=["This file contains serialization test code."])$

#include "$ctx.filename$Serialization.h"
#include <ucdr/microcdr.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <inttypes.h>
#include <string.h>
#include <time.h>

#define BUFFER_SIZE 64000

$definitions; separator="\n"$

int test$ctx.lastStructure.cScopedname$()
{
    $ctx.lastStructure.cScopedname$ $ctx.lastStructure.cScopedname$_serialization_topic = {0};
    $ctx.lastStructure.cScopedname$ $ctx.lastStructure.cScopedname$_deserialization_topic = {0};

    initialize$ctx.lastStructure.cScopedname$(&$ctx.lastStructure.cScopedname$_serialization_topic);

    uint8_t buffer[BUFFER_SIZE];
    ucdrBuffer mb;

    ucdr_init_buffer(&mb, buffer, BUFFER_SIZE);
    $ctx.lastStructure.cScopedname$_serialize_topic(&mb, &$ctx.lastStructure.cScopedname$_serialization_topic);

    ucdr_reset_buffer(&mb);
    $ctx.lastStructure.cScopedname$_deserialize_topic(&mb, &$ctx.lastStructure.cScopedname$_deserialization_topic);

    uint32_t $ctx.lastStructure.cScopedname$_serialization_topic_size = $ctx.lastStructure.cScopedname$_size_of_topic(&$ctx.lastStructure.cScopedname$_serialization_topic, 0);
    uint32_t $ctx.lastStructure.cScopedname$_deserialization_topic_size = $ctx.lastStructure.cScopedname$_size_of_topic(&$ctx.lastStructure.cScopedname$_deserialization_topic, 0);
    uint32_t buffer_length = ucdr_buffer_length(&mb);

    int topic_equal = 0 == memcmp(&$ctx.lastStructure.cScopedname$_serialization_topic, &$ctx.lastStructure.cScopedname$_deserialization_topic, sizeof($ctx.lastStructure.cScopedname$));
    int size_equal = $ctx.lastStructure.cScopedname$_serialization_topic_size == $ctx.lastStructure.cScopedname$_deserialization_topic_size;
    size_equal = size_equal && $ctx.lastStructure.cScopedname$_serialization_topic_size == buffer_length;

    printf("\n");
    printf("===== Before serialize: =====\n");
    print$ctx.lastStructure.cScopedname$(&$ctx.lastStructure.cScopedname$_serialization_topic);
    printf("\n");
    printf("===== After deserialize: =====\n");
    print$ctx.lastStructure.cScopedname$(&$ctx.lastStructure.cScopedname$_deserialization_topic);
    printf("\n");
    printf("ucdrBuffer: \n");
    printf("length: %d\n", buffer_length);
    printf("data: ");
    for(size_t i = 0; i < buffer_length; ++i)
    {
        printf("%02X ", mb.init[i]);
    }
    printf("\n\n");

    printf("Topic $ctx.lastStructure.cScopedname$ size: %s => pre: %d, post: %d, buffer: %d\n", size_equal ? "OK" : "ERROR", $ctx.lastStructure.cScopedname$_serialization_topic_size, $ctx.lastStructure.cScopedname$_deserialization_topic_size, buffer_length);
    printf("Topic $ctx.lastStructure.cScopedname$ comparation: %s\n", topic_equal ? "OK" : "ERROR");

    return topic_equal && size_equal;
}

int main(void)
{
    srand((unsigned) time(NULL));
    return test$ctx.lastStructure.cScopedname$() ? 0 : 1;
}

>>

struct_type(ctx, parent, struct) ::= <<>>

module(ctx, parent, module, definition_list) ::= <<>>

definition_list(definitions) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>

annotation(ctx, annotation) ::= <<>>

fwd_decl(ctx, parent, type) ::= <<>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>
