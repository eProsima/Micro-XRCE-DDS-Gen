// Copyright 2023 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "SerializationSource.c"], description=["This file contains serialization code."])$

#include "$ctx.filename$Serialization.h"

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <inttypes.h>
#include <string.h>

$ctx.directIncludeDependencies:{#include "$it$Serialization.h"}; separator="\n"$

$definitions; separator="\n"$

>>

struct_type(ctx, parent, struct) ::= <<
void print$struct.name$($struct.name$* topic)
{
    printf("$struct.name$: { \n");
    $struct.members:{$member_print(typecode=it.typecode, name=it.name, name=it.name)$}; separator="\n"$
    printf("}\n");
}

void initialize$struct.name$($struct.name$* topic)
{
    $struct.members:{$member_assignment(typecode=it.typecode, name=it.name, name=it.name)$}; separator="\n"$
}
>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

annotation(ctx, annotation) ::= <<>>

module(ctx, parent, module, definition_list) ::= <<>>

definition_list(definitions) ::= <<>>

fwd_decl(ctx, parent, type) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

// ========================================================================================
//                                      ASSIGNMENT
// ========================================================================================
member_assignment(typecode, name, originName) ::= <<
$if(typecode.isType_7)$
memset(&topic->$name$, rand() & 1, sizeof(topic->$name$));
$elseif(typecode.primitive)$
memset(&topic->$name$, rand(), sizeof(topic->$name$));
$elseif(typecode.isType_d)$
strcpy(topic->$name$, "AAAAA");
$elseif(typecode.isType_e)$
$sequence_assigment(typecode=typecode, name=name)$
$elseif(typecode.isType_f)$
$array_assigment(typecode=typecode, name=name, originName=originName, dimensions=typecode.dimensions)$
$else$
initialize$typecode.cTypename$(&topic->$name$);
$endif$
>>

sequence_assigment(typecode, name) ::= <<
topic->$name$_size = $typecode.maxsize$ / 2;
$if(typecode.contentTypeCode.primitive)$
memset(topic->$name$, rand(), topic->$name$_size * $typecode.contentTypeCode.size$);
$else$
for(int i = 0; i < topic->$name$_size; ++i)
{
    $member_assignment(typecode=typecode.contentTypeCode, name=indexName(name=name), originName=name)$
}
$endif$
>>

array_assigment(typecode, name, originalName, dimensions) ::= <<
$if(rest(dimensions))$
for(int i$length(dimensions)$ = 0; i$length(dimensions)$ < sizeof(topic->$name$) / sizeof(topic->$name$[0]); ++i$length(dimensions)$)
{
    $array_assigment(typecode=typecode, name=indexName(name=name, suffix=length(dimensions)), originName=originName, dimensions=rest(dimensions))$
}
$elseif(typecode.contentTypeCode.primitive)$
memset(topic->$name$, rand(), sizeof(topic->$name$));
$elseif(typecode.contentTypeCode.isType_d)$
for(int i = 0; i < sizeof(topic->$name$) / $typecode.contentTypeCode.maxsize$; ++i)
{
    $member_assignment(typecode=typecode.contentTypeCode, name=indexName(name=name), originName=name)$
}
$else$
for(int i = 0; i < sizeof(topic->$name$) / sizeof($typecode.cTypename$); ++i)
{
    $member_assignment(typecode=typecode.contentTypeCode, name=indexName(name=name), originName=name)$
}
$endif$
>>

// ========================================================================================
//                                         PRINT
// ========================================================================================
member_print(typecode, name, originName) ::= <<
$if(typecode.primitive)$
printf("$name$: 0x%" PRIx64 "\n", (uint64_t)topic->$name$);
$elseif(typecode.isType_d)$
printf("$name$: %s\n", topic->$name$);
$elseif(typecode.isType_e)$
$sequence_print(typecode=typecode, name=name)$
$elseif(typecode.isType_f)$
$array_print(typecode=typecode, name=name, originName=originName, dimensions=typecode.dimensions)$
$else$
print$typecode.cTypename$(&topic->$name$);
$endif$
>>

sequence_print(typecode, name) ::= <<
printf("$name$_size: 0x%" PRIx64 "\n", (uint64_t)topic->$name$_size);
$if(typecode.contentTypeCode.primitive)$
printf("$name$: ");
$print_sequence(name)$
$else$
printf("$name$: \n");
for(int i = 0; i < topic->$name$_size; ++i)
{
    $member_print(typecode=typecode.contentTypeCode, name=indexName(name=name), originName=name)$
}
$endif$
>>

array_print(typecode, name, originalName, dimensions) ::= <<
$if(rest(dimensions))$
printf("$name$: \n");
for(int i$length(dimensions)$ = 0; i$length(dimensions)$ < sizeof(topic->$name$) / sizeof(topic->$name$[0]); ++i$length(dimensions)$)
{
    $array_print(typecode=typecode, name=indexName(name=name, suffix=length(dimensions)), originName=originName, dimensions=rest(dimensions))$
}
$elseif(typecode.contentTypeCode.primitive)$
printf("$name$: ");
$print_array(typecode=typecode, name=name)$
$elseif(typecode.contentTypeCode.isType_d)$
printf("$name$: \n");
for(int i = 0; i < sizeof(topic->$name$) / $typecode.contentTypeCode.maxsize$; ++i)
{
    $member_print(typecode=typecode.contentTypeCode, name=indexName(name=name), originName=name)$
}
$else$
printf("$name$: \n");
for(int i = 0; i < sizeof(topic->$name$) / sizeof($typecode.cTypename$); ++i)
{
    $member_print(typecode=typecode.contentTypeCode, name=indexName(name=name), originName=name)$
}
$endif$
>>

print_sequence(name) ::= <<
for(int i = 0; i < topic->$name$_size; ++i)
{
    printf("%" PRIx64 " ", (uint64_t)topic->$name$[i]);
}
printf("\n");
>>

print_array(typecode, name) ::= <<
for(int i = 0; i < sizeof(topic->$name$) / sizeof($typecode.cTypename$); ++i)
{
    printf("%" PRIx64 " ", (uint64_t)topic->$name$[i]);
}
printf("\n");
>>
