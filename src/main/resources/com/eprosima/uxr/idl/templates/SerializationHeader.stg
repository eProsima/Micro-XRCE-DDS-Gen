// Copyright 2023 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group ProtocolHeader;

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Serialization.h"], description=["This file contains serialization definitions."])$

#ifndef _UXR_GENERATED_$ctx.headerGuardName$_SERIALIZATION_H_
#define _UXR_GENERATED_$ctx.headerGuardName$_SERIALIZATION_H_

#include "$ctx.filename$.h"

$definitions; separator="\n"$

#endif //_UXR_GENERATED_$ctx.headerGuardName$_SERIALIZATION_H_
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

struct_type(ctx, parent, struct) ::= <<
void print$struct.cScopedname$($struct.cScopedname$* topic);

void initialize$struct.cScopedname$($struct.cScopedname$* topic);
>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

bitmask_type(ctx, parent, bitmask) ::= <<>>

bitset_type(ctx, parent, bitset) ::= <<>>

annotation(ctx, annotation) ::= <<>>

fwd_decl(ctx, parent, type) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>
