// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypesHeader;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "Writer.h"], description=["This header file contains the write function of the described types in the IDL file."])$

#ifndef _$ctx.filename;format="toUpper"$_WRITER_H_
#define _$ctx.filename;format="toUpper"$_WRITER_H_

#ifdef __cplusplus
extern "C"
{
#endif

$if(ctx.printexception)$
#include <$ctx.product$/exceptions/UserException.h>
$endif$

#include "$ctx.filename$.h"

#include <micrortps/client/client.h>
$ctx.directIncludeDependencies : {include | #include "$include$.h"}; separator="\n"$

$definitions; separator="\n"$
#ifdef __cplusplus
}
#endif

#endif // _$ctx.filename;format="toUpper"$_WRITER_H_
>>

// TODO name -> module
module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<>>
interface(ctx, parent, interface, export_list) ::= <<>>
export_list(exports) ::= <<>>
exception(ctx, parent, exception) ::= <<>>
operation(ctx, parent, operation, param_list) ::= <<>>
param_list(parameters) ::= <<>>
param(parameter) ::= <<>>
const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<
$typedefs : { typedef |typedef $typedef.typedefContentTypeCode.cTypename$ $typedef.name$;}; separator="\n"$
>>

struct_type(ctx, parent, struct, extensions) ::= <<
bool mr_write_$struct.cScopedname$_topic(mrSession* session, mrStreamId stream_id, mrObjectId datawriter_id,
        const $struct.cScopedname$* topic);
>>

union_type(ctx, parent, union, extensions) ::= <<>>
enum_type(ctx, parent, enum) ::= <<>>

/***** Utils *****/

public_member_declaration(member) ::= <<>>
private_member_declaration(member) ::= <<>>
public_unionmember_declaration(member) ::= <<>>
size_functions(type) ::= <<>>
serialization_functions(type) ::= <<>>
