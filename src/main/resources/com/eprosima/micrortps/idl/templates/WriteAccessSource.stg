// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypesSource;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "Writer.c"], description=["This source file contains the write function of the described types in the IDL file."])$

#include "$ctx.filename$Writer.h"

#include <micrortps/client/core/serialization/xrce_protocol.h>
#include <micrortps/client/core/session/submessage.h>

$definitions; separator="\n"$

>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<>>

export_list(exports) ::= <<>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct, extensions) ::= <<
bool mr_write_$struct.cScopedname$_topic(mrSession* session, mrStreamId stream_id, mrObjectId datawriter_id, const
        $struct.cScopedname$* topic)
{
    MicroBuffer mb;
    uint32_t topic_size = $struct.cScopedname$_size_of_topic(topic, 0);
    mr_prepare_output_stream(session, stream_id, datawriter_id, &mb, topic_size);
    return $struct.cScopedname$_serialize_topic(&mb, topic);
}
>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

/***** Utils *****/

public_unionmember_declaration(class, member, totallabels, defaultvalue) ::= <<>>

member_move(member) ::= <<>>

// TODO Mirar si el default: esta delante de otros casos, el resto no se ejecuta.
unionmember_discriminator_case(member, totallabels) ::= <<>>

unionmember_copy(member) ::= <<>>

unionmemberdefault_copy(member) ::= <<>>

unionmember_move(member) ::= <<>>

unionmemberdefault_move(member) ::= <<>>

unionmember_set_discriminator(member, defaultvalue) ::= <<>>

unionmember_check_case_list(member, totallabels) ::= <<>>

unionmember_case_selection_se(ctx, member) ::= <<>>

unionmemberdefault_case_selection_se(ctx, member) ::= <<>>

unionmember_case_selection_de(ctx, member) ::= <<>>

unionmemberdefault_case_selection_de(ctx, member) ::= <<>>

unionmember_case_selection_sesize(ctx, member, data, var) ::= <<>>

unionmemberdefault_case_selection_sesize(ctx, member, data, var) ::= <<>>
