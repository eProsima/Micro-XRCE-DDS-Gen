// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group TypesSource;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, ".c"], description=["This source file contains the definition of the described types in the IDL file."])$

#include "$ctx.filename$.h"

#include <microcdr/microcdr.h>
#include <string.h>

$definitions; separator="\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
$definition_list$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

annotation(ctx, annotation) ::= <<>>

interface(ctx, parent, interface, export_list) ::= <<>>

export_list(exports) ::= <<>>

exception(ctx, parent, exception) ::= <<>>

operation(ctx, parent, operation, param_list) ::= <<>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

const_decl(ctx, parent, const) ::= <<>>

typedef_decl(ctx, parent, typedefs) ::= <<>>

struct_type(ctx, parent, struct, extensions) ::= <<
bool $struct.cScopedname$_serialize_topic(MicroBuffer* writer, const $struct.cScopedname$* topic)
{
    $struct.members : { member |$member_serialization(ctx=ctx, typecode=member.typecode, name=member.name, originName=member.name)$}; separator="\n"$
    return writer->error == BUFFER_OK;
}

bool $struct.cScopedname$_deserialize_topic(MicroBuffer* reader, $struct.cScopedname$* topic)
{
    $struct.members : { member |$member_deserialization(ctx=ctx, typecode=member.typecode, name=member.name, originName=member.name)$}; separator="\n"$
    return reader->error == BUFFER_OK;
}

uint32_t $struct.cScopedname$_size_of_topic(const $struct.cScopedname$* topic, uint32_t size)
{
    $struct.members : { member|$member_serialized_size(ctx=ctx, typecode=member.typecode, name=member.name, originName=member.name)$};separator="\n"$
    return size;
}
>>

union_type(ctx, parent, union) ::= <<>>

enum_type(ctx, parent, enum) ::= <<>>

member_serialization(ctx, typecode, name, originName) ::= <<
$if(typecode.primitive)$(void) serialize_$typecode.cTypename$(writer, topic->$name$);
$elseif(typecode.isType_d)$
(void) serialize_sequence_char(writer, topic->$name$, (uint32_t)strlen(topic->$name$) + 1);
$elseif(typecode.isType_e)$
$sequence_serialization(ctx=ctx, typecode=typecode, name=name)$
$elseif(typecode.isType_f)$
(void) serialize_array_$typecode.cTypename$(writer, topic->$name$, sizeof(topic->$name$));
$else$(void) $typecode.scopedname$_serialize_topic(writer, &topic->$name$);
$endif$
>>

member_deserialization(ctx, typecode, name, originName) ::= <<
$if(typecode.primitive)$(void) deserialize_$typecode.cTypename$(reader, &topic->$name$);
$elseif(typecode.isType_d)$
uint32_t $originName$_length; //not used
(void) deserialize_sequence_char(reader, topic->$name$, &$originName$_length);
$elseif(typecode.isType_e)$
$sequence_deserialization(ctx=ctx, typecode=typecode, name=name)$
$elseif(typecode.isType_f)$
(void) deserialize_array_$typecode.cTypename$(reader, topic->$name$, sizeof(topic->$name$));
$else$(void) $typecode.scopedname$_deserialize_topic(reader, &topic->$name$);
$endif$
>>

member_serialized_size(ctx, typecode, name, originName) ::= <<
>>

sequence_serialization(ctx, typecode, name) ::= <<
$if(typecode.contentTypeCode.primitive)$
(void) serialize_sequence_$typecode.cTypename$(writer, topic->$name$, topic->$name$_size);
$elseif(typecode.contentTypeCode.isType_d)$
for(int i = 0; i < topic->$name$_size; ++i)
{    
    $member_serialization(ctx=ctx, typecode=typecode.contentTypeCode, name=indexName(name), originName=name)$
}
$else$
(void) serialize_uint32_t(writer, topic->$name$_size);
for(int i = 0; i < topic->$name$_size; ++i)
{    
    $member_serialization(ctx=ctx, typecode=typecode.contentTypeCode, name=indexName(name), originName=name)$
}
$endif$
>>

sequence_deserialization(ctx, typecode, name) ::= <<
$if(typecode.contentTypeCode.primitive)$
(void) deserialize_sequence_$typecode.cTypename$(reader, topic->$name$, &topic->$name$_size);
$elseif(typecode.contentTypeCode.isType_d)$
for(int i = 0; i < topic->$name$_size; ++i)
{    
    $member_deserialization(ctx=ctx, typecode=typecode.contentTypeCode, name=indexName(name), originName=name)$
}
$else$
(void) deserialize_uint32_t(reader, &topic->$name$_size);
for(int i = 0; i < topic->$name$_size; ++i)
{    
    $member_deserialization(ctx=ctx, typecode=typecode.contentTypeCode, name=indexName(name), originName=name)$
}
$endif$
>>

indexName(name) ::= <<$name$[i]>>